/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import dao.EstoqueDAO;
import dto.EstoqueDTO;
import dto.ProdutoDTO;
import java.awt.Color;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author Estudo
 */
public class formEstoqueView extends javax.swing.JFrame {

    /**
     * Creates new form formEstoqueView
     */
    public formEstoqueView() {
        initComponents();
        listarEstoque();
        restaurarDadosComboBoxProduto();
        
        tabelaEstoque.getTableHeader().setFont(new Font ("Segoe UI", Font.BOLD, 12));
        tabelaEstoque.getTableHeader().setOpaque(false);
        tabelaEstoque.getTableHeader().setBackground(new Color(32, 136, 203));
        tabelaEstoque.getTableHeader().setForeground(new Color(0, 0, 0));
        tabelaEstoque.setRowHeight(25);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtQuantidadeMaxima = new javax.swing.JTextField();
        txtDataEntrada = new javax.swing.JTextField();
        txtQuantidadeEmEstoque = new javax.swing.JTextField();
        txtQuantidadeMinima = new javax.swing.JTextField();
        txtIdEstoque = new javax.swing.JTextField();
        txtDescricao = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnCadastrarEstoque = new javax.swing.JButton();
        btnAlterarInformacoesEstoque = new javax.swing.JButton();
        btnLimparCamposEstoque = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaEstoque = new javax.swing.JTable();
        btnCarregarInformacoesEstoque = new javax.swing.JButton();
        btnExcluirInformacoesEstoque = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        cbxIdProduto = new javax.swing.JComboBox<>();
        txtPrecoUnidade = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel1.setText("Cadastro Estoque");

        txtDataEntrada.setEnabled(false);

        txtIdEstoque.setEnabled(false);

        jLabel2.setText("ID_Estoque");

        jLabel3.setText("ID_Produto");

        jLabel5.setText("Quantidade em Estoque");

        jLabel6.setText("Quantidade Máxima");

        jLabel7.setText("Quantidade Minima");

        jLabel8.setText("Data de Entrada");

        jLabel10.setText("Descrição");

        btnCadastrarEstoque.setIcon(new javax.swing.ImageIcon("C:\\Users\\Estudo\\Desktop\\BKP_POO_C_INTERFACES - Copia\\sistema_estoque\\src\\main\\java\\icons\\news.png")); // NOI18N
        btnCadastrarEstoque.setText("Cadastrar");
        btnCadastrarEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarEstoqueActionPerformed(evt);
            }
        });

        btnAlterarInformacoesEstoque.setIcon(new javax.swing.ImageIcon("C:\\Users\\Estudo\\Desktop\\BKP_POO_C_INTERFACES - Copia\\sistema_estoque\\src\\main\\java\\icons\\refresh.png")); // NOI18N
        btnAlterarInformacoesEstoque.setText("Alterar Informações");
        btnAlterarInformacoesEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarInformacoesEstoqueActionPerformed(evt);
            }
        });

        btnLimparCamposEstoque.setIcon(new javax.swing.ImageIcon("C:\\Users\\Estudo\\Desktop\\BKP_POO_C_INTERFACES - Copia\\sistema_estoque\\src\\main\\java\\icons\\eraser.png")); // NOI18N
        btnLimparCamposEstoque.setText("Limpar Campos");
        btnLimparCamposEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposEstoqueActionPerformed(evt);
            }
        });

        tabelaEstoque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID_Estoque", "Valor Total do Estoque", "Quantidade em Estoque", "Quantidade Máxima", "Quantidade Minima", "Data de Entrada", "Descrição", "ID_Produto", "Preço_Unidade"
            }
        ));
        tabelaEstoque.setFocusable(false);
        tabelaEstoque.setSelectionBackground(new java.awt.Color(232, 57, 95));
        tabelaEstoque.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(tabelaEstoque);

        btnCarregarInformacoesEstoque.setIcon(new javax.swing.ImageIcon("C:\\Users\\Estudo\\Desktop\\BKP_POO_C_INTERFACES - Copia\\sistema_estoque\\src\\main\\java\\icons\\reload.png")); // NOI18N
        btnCarregarInformacoesEstoque.setText("Carregar Informações");
        btnCarregarInformacoesEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarInformacoesEstoqueActionPerformed(evt);
            }
        });

        btnExcluirInformacoesEstoque.setIcon(new javax.swing.ImageIcon("C:\\Users\\Estudo\\Desktop\\BKP_POO_C_INTERFACES - Copia\\sistema_estoque\\src\\main\\java\\icons\\trash.png")); // NOI18N
        btnExcluirInformacoesEstoque.setText("Excluir Informações");
        btnExcluirInformacoesEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirInformacoesEstoqueActionPerformed(evt);
            }
        });

        btnVoltar.setIcon(new javax.swing.ImageIcon("C:\\Users\\Estudo\\Desktop\\BKP_POO_C_INTERFACES - Copia\\sistema_estoque\\src\\main\\java\\icons\\return.png")); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        cbxIdProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));

        jLabel9.setText("Preço da Unidade");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(385, 385, 385)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCadastrarEstoque)
                                .addGap(18, 18, 18)
                                .addComponent(btnAlterarInformacoesEstoque)
                                .addGap(18, 18, 18)
                                .addComponent(btnLimparCamposEstoque))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnVoltar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCarregarInformacoesEstoque)
                                    .addGap(47, 47, 47)
                                    .addComponent(btnExcluirInformacoesEstoque)
                                    .addGap(16, 16, 16))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 988, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtPrecoUnidade)
                                                .addGap(62, 62, 62)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtIdEstoque, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5)
                                                .addComponent(txtQuantidadeEmEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(62, 62, 62)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtQuantidadeMaxima)
                                            .addComponent(jLabel6)
                                            .addComponent(txtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8))))
                                .addGap(70, 70, 70)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(txtQuantidadeMinima, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(cbxIdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxIdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantidadeMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuantidadeEmEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuantidadeMinima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecoUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarEstoque)
                    .addComponent(btnAlterarInformacoesEstoque)
                    .addComponent(btnLimparCamposEstoque))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluirInformacoesEstoque)
                    .addComponent(btnCarregarInformacoesEstoque)
                    .addComponent(btnVoltar))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlterarInformacoesEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarInformacoesEstoqueActionPerformed
        if (txtQuantidadeEmEstoque.getText().isEmpty() || txtQuantidadeMaxima.getText().isEmpty() || txtQuantidadeMinima.getText().isEmpty() || txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Prencha as Informações dos campos");
        } else {
             
            alterarEstoque();
            listarEstoque();
            limparCampos();
        }
    }//GEN-LAST:event_btnAlterarInformacoesEstoqueActionPerformed

    private void btnCarregarInformacoesEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarInformacoesEstoqueActionPerformed
        carregarCamposEstoque();
    }//GEN-LAST:event_btnCarregarInformacoesEstoqueActionPerformed

    private void btnCadastrarEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarEstoqueActionPerformed
        if ( txtQuantidadeEmEstoque.getText().isEmpty() || txtQuantidadeMaxima.getText().isEmpty() || txtQuantidadeMinima.getText().isEmpty() || txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Prencha as Informações dos campos");
        } else {
             
            cadastrarEstoque();
            listarEstoque();
            limparCampos();
        }
    }//GEN-LAST:event_btnCadastrarEstoqueActionPerformed

    private void btnExcluirInformacoesEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirInformacoesEstoqueActionPerformed
       if ( txtQuantidadeEmEstoque.getText().isEmpty() || txtQuantidadeMaxima.getText().isEmpty() || txtQuantidadeMinima.getText().isEmpty() || txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Prencha as Informações dos campos");
        } else {
             
            excluirEstoque();
            listarEstoque();
            limparCampos();
        }
    }//GEN-LAST:event_btnExcluirInformacoesEstoqueActionPerformed

    private void btnLimparCamposEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposEstoqueActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparCamposEstoqueActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        voltarTela();
         
    }//GEN-LAST:event_btnVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formEstoqueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formEstoqueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formEstoqueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formEstoqueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formEstoqueView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterarInformacoesEstoque;
    private javax.swing.JButton btnCadastrarEstoque;
    private javax.swing.JButton btnCarregarInformacoesEstoque;
    private javax.swing.JButton btnExcluirInformacoesEstoque;
    private javax.swing.JButton btnLimparCamposEstoque;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cbxIdProduto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaEstoque;
    private javax.swing.JTextField txtDataEntrada;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtIdEstoque;
    private javax.swing.JTextField txtPrecoUnidade;
    private javax.swing.JTextField txtQuantidadeEmEstoque;
    private javax.swing.JTextField txtQuantidadeMaxima;
    private javax.swing.JTextField txtQuantidadeMinima;
    // End of variables declaration//GEN-END:variables


    
    private void listarEstoque() {
        
        try {
            
            EstoqueDAO objestoquedao = new EstoqueDAO();
            
            DefaultTableModel model = (DefaultTableModel) tabelaEstoque.getModel();
            
            model.setNumRows(0);
            
            ArrayList<EstoqueDTO> lista = objestoquedao.pesquisarEstoque();
            
            for(int num = 0 ; num < lista.size(); num++) {
                
                model.addRow(new Object[] {
                    
                    lista.get(num).getId_estoque(),
                    lista.get(num).valorTotalEmEstoque(),  // Adicione esta linha
                    lista.get(num).getQuantidade_em_estoque(),
                    lista.get(num).getQuantidade_maxima(),
                    lista.get(num).getQuantidade_minima(),
                    lista.get(num).getData_entrada(), 
                    lista.get(num).getDescricao(),
                    lista.get(num).getId_produto(),
                    lista.get(num).getPreco_unidade(),
                    
                    
            });
                   
            }
            
        } catch (Exception erro) {
            
            JOptionPane.showMessageDialog(null, "Listar Estoque VIEW" + erro);
        }
    }
    
    
    private void carregarCamposEstoque() {
        
        int setar = tabelaEstoque.getSelectedRow();
        
        txtIdEstoque.setText(tabelaEstoque.getModel().getValueAt(setar, 0).toString());
        txtQuantidadeEmEstoque.setText(tabelaEstoque.getModel().getValueAt(setar, 2).toString());
        txtQuantidadeMaxima.setText(tabelaEstoque.getModel().getValueAt(setar, 3).toString());
        txtQuantidadeMinima.setText(tabelaEstoque.getModel().getValueAt(setar, 4).toString());
        txtDataEntrada.setText(tabelaEstoque.getModel().getValueAt(setar, 5).toString());
        txtDescricao.setText(tabelaEstoque.getModel().getValueAt(setar, 6).toString());
        txtPrecoUnidade.setText(tabelaEstoque.getModel().getValueAt(setar, 8).toString());
        
    }
    
    
    private void cadastrarEstoque() {
        
    EstoqueDTO objestoquedto = new EstoqueDTO();
        
    int cod_produto;
    int quantidade_em_estoque;
    int quantidade_maxima;
    int quantidade_minima;
    String data_entrada;
    String descricao;
    
    cod_produto = id_produto.elementAt(cbxIdProduto.getSelectedIndex() - 1);
    quantidade_em_estoque = Integer.parseInt(txtQuantidadeEmEstoque.getText());
    quantidade_maxima = Integer.parseInt(txtQuantidadeMaxima.getText());
    quantidade_minima = Integer.parseInt(txtQuantidadeMinima.getText());
    data_entrada = txtDataEntrada.getText();
    descricao = txtDescricao.getText();
       
    
    objestoquedto.setId_produto(cod_produto);
    objestoquedto.setQuantidade_em_estoque(quantidade_em_estoque);
    objestoquedto.setQuantidade_maxima(quantidade_maxima);
    objestoquedto.setQuantidade_minima(quantidade_minima);
    objestoquedto.setData_entrada(data_entrada);
    objestoquedto.setDescricao(descricao);
    objestoquedto.setPreco_unidade(Double.parseDouble(txtPrecoUnidade.getText())); // Adicione esta linha para definir o preço da unidade
    
    EstoqueDAO objestoquedao = new EstoqueDAO();
    
    // Certifique-se de usar o mesmo nome da variável
    objestoquedao.cadastrarEstoque(objestoquedto);
}
    
    
     private void limparCampos() {
        
        txtIdEstoque.setText("");
       
        
        txtQuantidadeEmEstoque.setText("");
        txtQuantidadeMaxima.setText("");
        txtQuantidadeMinima.setText("");
        txtDataEntrada.setText("");
        txtDescricao.setText("");
        txtPrecoUnidade.setText("");
        txtIdEstoque.requestFocus();

    }
     
     
    private void alterarEstoque() {
        
    int id_estoque;
    int id_produto;
    Double valor_estoque;
    int quantidade_em_estoque;
    int quantidade_maxima;
    int quantidade_minima;
    String data_entrada;
    int id_fornecedor;
    String descricao;
   
 
    
    id_estoque = Integer.parseInt(txtIdEstoque.getText());
    quantidade_em_estoque = Integer.parseInt(txtQuantidadeEmEstoque.getText());
    quantidade_maxima= Integer.parseInt(txtQuantidadeMaxima.getText());
    quantidade_minima = Integer.parseInt( txtQuantidadeMinima.getText());
    data_entrada = txtDataEntrada.getText();
    descricao = txtDescricao.getText();

    
  
    
    EstoqueDTO objestoquedto = new EstoqueDTO();
    
    objestoquedto.setId_estoque(id_estoque);
    
    
    objestoquedto.setQuantidade_em_estoque( quantidade_em_estoque);
    objestoquedto.setQuantidade_maxima(quantidade_maxima);
    objestoquedto.setQuantidade_minima(quantidade_minima);
    objestoquedto.setData_entrada(data_entrada);
    objestoquedto.setDescricao(descricao);
    
    
    
    EstoqueDAO objestoquedao = new EstoqueDAO();
    
    objestoquedao.alterarEstoque(objestoquedto);
           
    }
    
     private void excluirEstoque() {
        
        int id_estoque;
        
        id_estoque = Integer.parseInt(txtIdEstoque.getText());
        
        EstoqueDTO objestoquedto = new EstoqueDTO();
        
        objestoquedto.setId_estoque(id_estoque);
        
        EstoqueDAO objestoquedao = new EstoqueDAO();
        
        objestoquedao.excluirEstoque(objestoquedto);
        
        
    }
     
     
     public void voltarTela() {
         
          formPrincipalView formprincipalview = new formPrincipalView();
                formprincipalview.setVisible(true);
                
                dispose();
     }
     
     
     Vector<Integer> id_produto = new Vector<Integer>();
     
     
     public void restaurarDadosComboBoxProduto() {
         
         try {
             
             EstoqueDAO objestoquedao = new EstoqueDAO();
             ResultSet rs = objestoquedao.listarIdProduto();
             
             while (rs.next()) {
                 
                 id_produto.addElement(rs.getInt(1));
                 cbxIdProduto.addItem(rs.getString(2));
             }
             
         } catch (SQLException erro) {
             
             JOptionPane.showMessageDialog(null, "Carregar ID_Produto View" + erro.getLocalizedMessage());
         }
     }
    


}
